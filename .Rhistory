caminho <- "C:/Users/julia/OneDrive/Documentos/Juliana/Estatística Projeto Complementar/bitcoin_dados_historicos_investing.com.xlsx"
# Ler o arquivo Excel
dados1 <- read_excel(caminho)
# Limpeza e transformação dos dados
dados1 <- dados1 %>%
mutate(Vol = parse_number(Vol) * case_when(
str_detect(Vol, "K") ~ 10,
str_detect(Vol, "M") ~ 10000,
str_detect(Vol, "B") ~ 10000000,
TRUE ~ 1
))
# Converter as colunas numéricas para formato numérico
dados1 <- dados1 %>%
mutate(Último = as.numeric(Último),
Abertura = as.numeric(Abertura),
Máxima = as.numeric(Máxima),
Mínima = as.numeric(Mínima))
dados1$Data <- as.Date(dados1$Data, format="%d.%m.%Y")
dados <- dados1[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")]
#===================================================================================================
#Projeto completo
#===================================================================================================
# Função para gerar a tabela de dados paginada
gerarTabela <- function(data) {
datatable(data, options = list(pageLength = 10))
}
# Definição do dashboard Shiny
ui <- dashboardPage(
dashboardHeader(title = "Dashboard Shiny"),
dashboardSidebar(
sidebarMenu(
menuItem("Gráfico", tabName = "aba1"),
menuItem("Tabela", tabName = "aba2")
)
),
dashboardBody(
tabItems(
# Aba 1: Gráfico
tabItem(
tabName = "aba1",
fluidRow(
box(
plotlyOutput("grafico", height = 650, width = 1250 ),
textOutput("info")
)
)
),
# Aba 2: Tabela
tabItem(
tabName = "aba2",
fluidRow(
box(
title = "Filtrar",
status = "primary",
solidHeader = TRUE,
width = 3,
selectInput("filtroColuna", "Coluna para filtrar", choices = colnames(dados<- dados[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")])),
selectInput("filtroOperador", "Operador", choices = c("=", "<=", ">=")),
numericInput("filtroValor", "Valor", value = 0),
#dateRangeInput(inputId = "filtroData",
#         label = "Data",
#        value = min(dados$Data),
#       min = "2022-04-20",
#      max = "2023-04-20",
#     format = "yyyy-mm-dd",
#    startview = "month",
#   weekstart = 0,
#  language = "en"),
dateRangeInput(inputId = "filtroData",
label = "Data",
start = min(dados1$Data),
end = max(dados1$Data)),
actionButton("filtrar", "Filtrar")
),
box(
DT::dataTableOutput("tabela"),
width = 9
),
box(
valueBoxOutput("media"),
valueBoxOutput("desvioPadrao"),
valueBoxOutput("mediana"),
valueBoxOutput("quartis"),
valueBoxOutput("quartil3"),
width = 12
)
)
)
)
)
)
server <- function(input, output) {
# Renderizar o gráfico na Aba 1
output$grafico <- renderPlotly({
p <- ggplot(dados1, aes(x = Data, y = Último)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Preço da Criptomoeda",
x = "Data",
y = "Preço") +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)) +
scale_x_date(date_labels = "%d/%m/%Y") +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"),
breaks = seq(min(dados$Último), max(dados$Último), by = 10000))
ggplotly(p)
})
# Função para exibir informações da criptomoeda ao passar o mouse sobre os pontos do gráfico
output$info <- renderText({
evento <- event_data("plotly_hover")
if (!is.null(evento)) {
dia <- as.character(evento[["x"]])
preco <- evento[["y"]]
paste("Dia:", dia, "\nPreço:", scales::dollar(preco))
}
})
# Renderizar a tabela na Aba 2
output$tabela <- DT::renderDataTable({
datatable(dados1)
})
# Filtrar a tabela com base nos inputs do usuário
observeEvent(input$filtrar, {
coluna <- input$filtroColuna
operador <- input$filtroOperador
valor <- input$filtroValor
datas <- as.Date(input$filtroData, format = "%Y.%m.%d")
if (operador == "=") {
dadosFiltrados <- dados1[dados1[[coluna]] == valor & dados1$Data == datas, ]
} else if (operador == "<=") {
dadosFiltrados <- dados1[dados1[[coluna]] <= valor & dados1$Data <= datas, ]
} else if (operador == ">=") {
dadosFiltrados <- dados1[dados1[[coluna]] >= valor & dados1$Data >= datas, ]
}
output$tabela <- DT::renderDataTable({
datatable(dadosFiltrados)
})
})
# Calcular as estatísticas e renderizar os valueBoxes na Aba 2
output$media <- renderValueBox({
valor <- round(mean(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Média de", input$filtroColuna))
})
output$desvioPadrao <- renderValueBox({
valor <- round(sd(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Desvio Padrão de", input$filtroColuna))
})
output$mediana <- renderValueBox({
valor <- round(median(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Mediana de", input$filtroColuna))
})
#  output$quartis <- renderValueBox({
#    quartis <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
#    valor <- paste("Q1:", round(quartis[1], 2), "Q2:", round(quartis[2], 2), "Q3:", round(quartis[3], 2))
#    valueBox(valor, paste("Quartis de", input$filtroColuna))
#  })
output$quartis <- renderValueBox({
quartis <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5), na.rm = TRUE)
valor <- paste("Q1:", round(quartis[1], 2), "Q2:", round(quartis[2], 2))
valueBox(valor, paste("Quartis de", input$filtroColuna))
})
output$quartil3 <- renderValueBox({
quartil3 <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
valor <- paste("Q3:", round(quartil3[3], 2))
valueBox(valor, paste("Quartil 3 de", input$filtroColuna))
})
}
# Executar o aplicativo Shiny
shinyApp(ui, server)
# Carregando as bibliotecas necessárias
library(readr)
library(readxl)
library(magrittr)
library(dplyr)
library(ggplot2)
library(leaflet)
library(tidyverse)
library(tidyr)
library(shiny)
library(lubridate)
library(shinydashboard)
library(DT)
library(plotly)
# Definindo o caminho para salvar o arquivo
caminho <- "C:/Users/julia/OneDrive/Documentos/Juliana/Estatística Projeto Complementar/bitcoin_dados_historicos_investing.com.xlsx"
# Ler o arquivo Excel
dados1 <- read_excel(caminho)
# Limpeza e transformação dos dados
dados1 <- dados1 %>%
mutate(Vol = parse_number(Vol) * case_when(
str_detect(Vol, "K") ~ 10,
str_detect(Vol, "M") ~ 10000,
str_detect(Vol, "B") ~ 10000000,
TRUE ~ 1
))
# Converter as colunas numéricas para formato numérico
dados1 <- dados1 %>%
mutate(Último = as.numeric(Último),
Abertura = as.numeric(Abertura),
Máxima = as.numeric(Máxima),
Mínima = as.numeric(Mínima))
dados1$Data <- as.Date(dados1$Data, format="%d.%m.%Y")
dados <- dados1[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")]
#===================================================================================================
#Projeto completo
#===================================================================================================
# Função para gerar a tabela de dados paginada
gerarTabela <- function(data) {
datatable(data, options = list(pageLength = 10))
}
# Definição do dashboard Shiny
ui <- dashboardPage(
dashboardHeader(title = "Dashboard Shiny"),
dashboardSidebar(
sidebarMenu(
menuItem("Gráfico", tabName = "aba1"),
menuItem("Tabela", tabName = "aba2")
)
),
dashboardBody(
tabItems(
# Aba 1: Gráfico
tabItem(
tabName = "aba1",
fluidRow(
box(
plotlyOutput("grafico", height = 650, width = 1250 ),
textOutput("info")
)
)
),
# Aba 2: Tabela
tabItem(
tabName = "aba2",
fluidRow(
box(
title = "Filtrar",
status = "primary",
solidHeader = TRUE,
width = 3,
selectInput("filtroColuna", "Coluna para filtrar", choices = colnames(dados<- dados[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")])),
selectInput("filtroOperador", "Operador", choices = c("=", "<=", ">=")),
numericInput("filtroValor", "Valor", value = 0),
dateRangeInput(inputId = "filtroData",
label = "Data",
start = min(dados1$Data),
end = max(dados1$Data)),
actionButton("filtrar", "Filtrar")
),
box(
DT::dataTableOutput("tabela"),
width = 9
),
box(
valueBoxOutput("media"),
valueBoxOutput("desvioPadrao"),
valueBoxOutput("mediana"),
valueBoxOutput("quartis"),
valueBoxOutput("quartil3"),
width = 12
)
)
)
)
)
)
server <- function(input, output) {
# Renderizar o gráfico na Aba 1
output$grafico <- renderPlotly({
p <- ggplot(dados1, aes(x = Data, y = Último)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Preço da Criptomoeda",
x = "Data",
y = "Preço") +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)) +
scale_x_date(date_labels = "%d/%m/%Y") +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"),
breaks = seq(min(dados$Último), max(dados$Último), by = 10000))
ggplotly(p)
})
# Função para exibir informações da criptomoeda ao passar o mouse sobre os pontos do gráfico
output$info <- renderText({
evento <- event_data("plotly_hover")
if (!is.null(evento)) {
dia <- as.character(evento[["x"]])
preco <- evento[["y"]]
paste("Dia:", dia, "\nPreço:", scales::dollar(preco))
}
})
# Renderizar a tabela na Aba 2
output$tabela <- DT::renderDataTable({
datatable(dados1)
})
# Filtrar a tabela com base nos inputs do usuário
observeEvent(input$filtrar, {
coluna <- input$filtroColuna
operador <- input$filtroOperador
valor <- input$filtroValor
datas <- as.Date(input$filtroData, format = "%Y.%m.%d")
if (operador == "=") {
dadosFiltrados <- dados1[dados1[[coluna]] == valor & dados1$Data == datas, ]
} else if (operador == "<=") {
dadosFiltrados <- dados1[dados1[[coluna]] <= valor & dados1$Data <= datas, ]
} else if (operador == ">=") {
dadosFiltrados <- dados1[dados1[[coluna]] >= valor & dados1$Data >= datas, ]
}
output$tabela <- DT::renderDataTable({
datatable(dadosFiltrados)
})
})
# Calcular as estatísticas e renderizar os valueBoxes na Aba 2
output$media <- renderValueBox({
valor <- round(mean(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Média de", input$filtroColuna))
})
output$desvioPadrao <- renderValueBox({
valor <- round(sd(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Desvio Padrão de", input$filtroColuna))
})
output$mediana <- renderValueBox({
valor <- round(median(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Mediana de", input$filtroColuna))
})
output$quartis <- renderValueBox({
quartis <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5), na.rm = TRUE)
valor <- paste("Q1:", round(quartis[1], 2), "Q2:", round(quartis[2], 2))
valueBox(valor, paste("Quartis de", input$filtroColuna))
})
output$quartil3 <- renderValueBox({
quartil3 <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
valor <- paste("Q3:", round(quartil3[3], 2))
valueBox(valor, paste("Quartil 3 de", input$filtroColuna))
})
}
# Executar o aplicativo Shiny
shinyApp(ui, server)
# Carregando as bibliotecas necessárias
library(readr)
library(readxl)
library(magrittr)
library(dplyr)
library(ggplot2)
library(leaflet)
library(tidyverse)
library(tidyr)
library(shiny)
library(lubridate)
library(shinydashboard)
library(DT)
library(plotly)
# Definindo o caminho para salvar o arquivo
caminho <- "C:/Users/julia/OneDrive/Documentos/Juliana/Estatística Projeto Complementar/bitcoin_dados_historicos_investing.com.xlsx"
# Ler o arquivo Excel
dados1 <- read_excel(caminho)
# Limpeza e transformação dos dados
dados1 <- dados1 %>%
mutate(Vol = parse_number(Vol) * case_when(
str_detect(Vol, "K") ~ 10,
str_detect(Vol, "M") ~ 10000,
str_detect(Vol, "B") ~ 10000000,
TRUE ~ 1
))
# Converter as colunas numéricas para formato numérico
dados1 <- dados1 %>%
mutate(Último = as.numeric(Último),
Abertura = as.numeric(Abertura),
Máxima = as.numeric(Máxima),
Mínima = as.numeric(Mínima))
dados1$Data <- as.Date(dados1$Data, format="%d.%m.%Y")
dados <- dados1[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")]
#===================================================================================================
#Projeto completo
#===================================================================================================
# Função para gerar a tabela de dados paginada
gerarTabela <- function(data) {
datatable(data, options = list(pageLength = 10))
}
# Definição do dashboard Shiny
ui <- dashboardPage(
dashboardHeader(title = "Dashboard Shiny"),
dashboardSidebar(
sidebarMenu(
menuItem("Gráfico", tabName = "aba1"),
menuItem("Tabela", tabName = "aba2")
)
),
dashboardBody(
tabItems(
# Aba 1: Gráfico
tabItem(
tabName = "aba1",
fluidRow(
box(
plotlyOutput("grafico", height = 650, width = 1250 ),
textOutput("info")
)
)
),
# Aba 2: Tabela
tabItem(
tabName = "aba2",
fluidRow(
box(
title = "Filtrar",
status = "primary",
solidHeader = TRUE,
width = 3,
selectInput("filtroColuna", "Coluna para filtrar", choices = colnames(dados<- dados[, c("Último", "Abertura", "Máxima", "Mínima", "Vol", "Var%")])),
selectInput("filtroOperador", "Operador", choices = c("=", "<=", ">=")),
numericInput("filtroValor", "Valor", value = 0),
dateRangeInput(inputId = "filtroData",
label = "Data",
start = min(dados1$Data),
end = max(dados1$Data)),
actionButton("filtrar", "Filtrar")
),
box(
DT::dataTableOutput("tabela"),
width = 9
),
box(
valueBoxOutput("media"),
valueBoxOutput("desvioPadrao"),
valueBoxOutput("mediana"),
valueBoxOutput("quartis"),
valueBoxOutput("quartil3"),
width = 12
)
)
)
)
)
)
server <- function(input, output) {
# Renderizar o gráfico na Aba 1
output$grafico <- renderPlotly({
p <- ggplot(dados1, aes(x = Data, y = Último)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Preço da Criptomoeda",
x = "Data",
y = "Preço") +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)) +
scale_x_date(date_labels = "%d/%m/%Y") +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"),
breaks = seq(min(dados$Último), max(dados$Último), by = 10000))
ggplotly(p)
})
# Função para exibir informações da criptomoeda ao passar o mouse sobre os pontos do gráfico
output$info <- renderText({
evento <- event_data("plotly_hover")
if (!is.null(evento)) {
dia <- as.character(evento[["x"]])
preco <- evento[["y"]]
paste("Dia:", dia, "\nPreço:", scales::dollar(preco))
}
})
# Renderizar a tabela na Aba 2
output$tabela <- DT::renderDataTable({
datatable(dados1)
})
# Filtrar a tabela com base nos inputs do usuário
observeEvent(input$filtrar, {
coluna <- input$filtroColuna
operador <- input$filtroOperador
valor <- input$filtroValor
datas <- as.Date(input$filtroData, format = "%Y.%m.%d")
if (operador == "=") {
dadosFiltrados <- dados1[dados1[[coluna]] == valor & dados1$Data == datas, ]
} else if (operador == "<=") {
dadosFiltrados <- dados1[dados1[[coluna]] <= valor & dados1$Data <= datas, ]
} else if (operador == ">=") {
dadosFiltrados <- dados1[dados1[[coluna]] >= valor & dados1$Data >= datas, ]
}
output$tabela <- DT::renderDataTable({
datatable(dadosFiltrados)
})
})
# Calcular as estatísticas e renderizar os valueBoxes na Aba 2
output$media <- renderValueBox({
valor <- round(mean(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Média de", input$filtroColuna))
})
output$desvioPadrao <- renderValueBox({
valor <- round(sd(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Desvio Padrão de", input$filtroColuna))
})
output$mediana <- renderValueBox({
valor <- round(median(dados1[[input$filtroColuna]], na.rm = TRUE), 2)
valueBox(valor, paste("Mediana de", input$filtroColuna))
})
output$quartis <- renderValueBox({
quartis <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5), na.rm = TRUE)
valor <- paste("Q1:", round(quartis[1], 2), "Q2:", round(quartis[2], 2))
valueBox(valor, paste("Quartis de", input$filtroColuna))
})
output$quartil3 <- renderValueBox({
quartil3 <- quantile(dados1[[input$filtroColuna]], probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
valor <- paste("Q3:", round(quartil3[3], 2))
valueBox(valor, paste("Quartil 3 de", input$filtroColuna))
})
}
# Executar o aplicativo Shiny
shinyApp(ui, server)
